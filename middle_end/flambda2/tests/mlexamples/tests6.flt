let $camlTests6__first_const21 = Block 0 () in
let code rec size(24)
      f_0 (x : imm tagged)
        my_closure my_region my_depth
        -> k * k1
        : imm tagged =
  let next_depth = rec_info (succ my_depth) in
  let prim = %int_comp x > 0 in
  let Pintcomp = %Tag_imm prim in
  (let untagged = %untag_imm Pintcomp in
   switch untagged
     | 0 -> k (42)
     | 1 -> k2)
    where k2 =
      ((let Psubint = x - 1 in
        apply direct(f_0)
          (my_closure ~ depth my_depth -> next_depth : _ -> imm tagged)
            (Psubint)
            &my_region
            -> k2 * k1)
         where k2 (apply_result : imm tagged) =
           let Paddint = 1 + apply_result in
           cont k (Paddint))
in
(let `region` = %begin_region in
 (let f = closure f_0 @f in
  apply direct(f_0) unroll(10)
    (f : _ -> imm tagged) (3) &`region` -> k2 * error)
   where k2 (region_return : imm tagged) =
     let `unit` = %end_region `region` in
     cont k1 (region_return))
  where k1 (n : imm tagged) =
    let Pmakeblock = %Block 0 (n) in
    cont k (Pmakeblock)
  where k define_root_symbol (module_block) =
    let field_0 = %block_load tag(0) size(1) (module_block, 0) in
    let $camlTests6 = Block 0 (field_0) in
    cont done ($camlTests6)
===>
let code f_0 deleted in
let `region` = %begin_region in
let $camlTests6__f_1 =
  closure f_0_1 @f
and code rec loopify(never) size(21) newer_version_of(f_0)
      f_0_1 (x : imm tagged)
        my_closure my_region my_depth
        -> k * k1
        : imm tagged =
  let prim = %int_comp x > 0 in
  switch prim
    | 0 -> k (42)
    | 1 -> k2
    where k2 =
      ((let Psubint = x - 1 in
        apply direct(f_0_1)
          ($camlTests6__f_1 ~ depth my_depth -> succ my_depth
           : _ -> imm tagged)
            (Psubint)
            &my_region
            -> k2 * k1)
         where k2 (apply_result : imm tagged) =
           let Paddint = 1 + apply_result in
           cont k (Paddint))
in
apply direct(f_0_1) inlining_state(depth(10))
  ($camlTests6__f_1 ~ depth unroll 10 0 -> unroll 9 1 : _ -> imm tagged)
    (2)
    &`region`
    -> k * error
  where k (apply_result : imm tagged) =
    let Paddint = 1 + apply_result in
    let `unit` = %end_region `region` in
    let $camlTests6 = Block 0 (Paddint) in
    cont done ($camlTests6)
